# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, modulesPath, ... }:

{
  imports = [
		(modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot = {
    loader = {
      systemd-boot.enable = true;
			systemd-boot.configurationLimit = 5;
      efi.canTouchEfiVariables = false;
    };
    
    initrd = {
      availableKernelModules = [ "xhci_pci" "thunderbolt" "vmd" "nvme" "usb_storage" "usbhid" "sd_mod" ];
      kernelModules = [ "i915" "nvidia" "nvidia_modeset" "nvidia_uvm" "nvidia_drm" ];
    };

    kernelModules = [ "kvm-intel" ];
    extraModulePackages = [ ];
    blacklistedKernelModules = [ "iwlwifi" ];
    kernelParams = [ ];
    extraModprobeConfig = ''
    # modset settings
    
    # iwlwifi.bt_coex_active=0
    # iwlwifi.power_save=0

    '';
  };

  fileSystems."/" =
    { device = "/dev/disk/by-label/NIX";
      fsType = "btrfs";
      options = [ "subvol=#core" ];
    };

  fileSystems."/tmp" =
    { device = "/dev/disk/by-label/NIX";
      fsType = "btrfs";
      options = [ "subvol=#void" "noatime" ];
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-label/NIXEFI";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  fileSystems."/root" =
    { device = "/dev/disk/by-label/NIX";
      fsType = "btrfs";
      options = [ "subvol=#ring0" "compress=zstd:1" ];
    };

  fileSystems."/nix" =
    { device = "/dev/disk/by-label/NIX";
      fsType = "btrfs";
      options = [ "subvol=#registry" "compress=zstd:1" "noatime" ];
    };

  fileSystems."/nix/store" =
    { device = "/dev/disk/by-label/NIX";
      fsType = "btrfs";
      options = [ "subvol=#store" "compress=zstd:1" "noatime" ];
    };

  fileSystems."/usr" =
    { device = "/dev/disk/by-label/NIX";
      fsType = "btrfs";
      options = [ "subvol=#resources" "compress=zstd:3" ];
    };

  fileSystems."/opt" =
    { device = "/dev/disk/by-label/NIX";
      fsType = "btrfs";
      options = [ "subvol=#optional" "compress=zstd:2" ];
    };

  fileSystems."/var" =
    { device = "/dev/disk/by-label/NIX";
      fsType = "btrfs";
      options = [ "subvol=#variables" "compress=zstd:1" ];
    };

  fileSystems."/etc" =
    { device = "/dev/disk/by-label/NIX";
      fsType = "btrfs";
      options = [ "subvol=#configuration" "compress=zstd:3" "autodefrag" ];
    };

  fileSystems."/etc/nixos" =
    { device = "/dev/disk/by-label/NIX";
      fsType = "btrfs";
      options = [ "subvol=#derivations" "compress=zstd:5" "autodefrag" ];
    };

  fileSystems."/dyn" =
    { device = "/dev/disk/by-label/NIX";
      fsType = "btrfs";
      options = [ "subvol=#dynamics" "compress=zstd:1" ];
    };

  fileSystems."/srv" =
    { device = "/dev/disk/by-label/NIX";
      fsType = "btrfs";
      options = [ "subvol=#serverdata" "compress=zstd:4" ];
    };

  fileSystems."/pag" =
    { device = "/dev/disk/by-label/NIX";
      fsType = "btrfs";
      options = [ "subvol=#pages" "noatime" ];
    };

  swapDevices = [ { device = "/pag/pagefile"; } ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno2.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp0s20f0u5.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  
  # hardware.enableRedistributableFirmware = true;
  # hardware.firmware = with pkgs.linux; [ ( linuxFirmware.iwlwifi_so_a0_hr_b0_72.ucode ) ];

  # hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  hardware.graphics.enable = true;
  hardware.nvidia = {
    prime = {
      offload.enable = true;
      offload.enableOffloadCmd = true;
      intelBusId = "PCI:0:2:0";
      nvidiaBusId = "PCI:1:0:0";
    };

    modesetting.enable = true;

    powerManagement = {
      enable = true;
      finegrained = true;
    };

    nvidiaSettings = false; # gui app
    open = false;
    package = config.boot.kernelPackages.nvidiaPackages.latest;
  };
  hardware.bluetooth.enable = true; # enables support for Bluetooth
  hardware.bluetooth.powerOnBoot = false;
}
